global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'
def create_row_placeholders(snip):
    placeholders_amount = int(snip.context['columns'])

    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1)
                                    for i in range(placeholders_amount)])

    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)
endglobal

# ╭──────────────────────────────────────────────────────────╮
# │                          env                             │
# ╰──────────────────────────────────────────────────────────╯
snippet komatemplate "start new tex file" b
\documentclass{scrreprt}
\input{../preamble.tex}

\begin{document}
\end{document}
endsnippet

context "{'columns': 0}"
post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable, eg tr8 => & & & & & & & &" br
`!p snip.context['columns'] = match.group(1)`
endsnippet

snippet sidebyside "side by side minipage" b
\begin{minipage}[t]{0.46\textwidth} % align at *t*op
\end{minipage}\hfill % leave as many space between as possible
\begin{minipage}[t]{0.46\textwidth}
\end{minipage}
endsnippet

snippet alg "algorithm" b
\begin{algorithm}[H]
\caption{$1} \label{alg:`!p snip.rv = t[1].replace(' ', '_').lower()`}
\begin{algorithmic}[1]
	\Require ${2:input}
	\Ensure ${3:output}
    \LComment{Init poison}
    \State Hello
	\ForAll{$x \in \R$}  \label{lst:line:gen_start}
            \State $b^x = \text{Gumbel-Softmax}(\psi_t^x)$
	\EndFor
\end{algorithmic}
\end{algorithm}
endsnippet

snippet prftwoway "two way proof" bA
\begin{itemize}[wide=\parindent]
	\item [($\implies$)] $1
	\item [($\impliedby$)] $2
\end{itemize}
$0
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	${0:${VISUAL}}
\\end{$1}
endsnippet

snippet env "begin w/ name and label" bA
\\begin{$1}[$2]
`!p # conditional add \label{}
map={
  "theorem": "th",
  "lemma": "lemma",
  "prf": "prf",
  "expl": "ex",
  "question": "Q",
  "definition": "def",
}
if len(t[2]) == 0:
	snip.rv = ""
else:
	prefix=map.get(t[1], "")
	snip.rv= r"\label{" + prefix + ":" + t[2].replace(' ', '_').replace('$', '').lower() + "}"
`
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:`!p snip.rv= t[2].replace(' ', '_').replace('$', '').lower()`}
	\begin{NiceTabular}[hvlines,baseline=2,cell-space-limits=1pt]{c|c|c}
		\RowStyle{\bfseries}
		header \\
		\hline\hline
        rows
	\end{NiceTabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet subcaption "subcaption" b
\begin{figure}[ht]
\centering
\begin{subcaptionblock}{0.45\linewidth}
	\centering
    \includegraphics[width=\linewidth]{}
    \caption{}
    \label{}
\end{subcaptionblock}%   %% use \hfill here
\begin{subcaptionblock}{0.45\linewidth}
	\centering
    \includegraphics[width=\linewidth]{}
    \caption{}
    \label{}
\end{subcaptionblock}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

snippet arrow "witharrow" bA
\begin{DispWithArrows*}
    ${1:${VISUAL}}
\end{DispWithArrows*}
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet optimA "optim template" iA
\begin{align*}
\\${1:min} \\ & $2 \\\\
\st \\ & $3
\end{align*}$0
endsnippet

snippet codesnippet "Code in latex" w
\begin{lstlisting}[language=Python, mathescape, frame = tlBR, caption={
numpy code
}, label={
lst:
}
]
def general_finite_difference(m, p):
    """
    f' = sum(w  * f(x))
    where x is m evenly spaced points, f p-deg poly
    """
    A = np.vander(np.linspace(-(m-1)/2, (m-1)/2, m), p+1, increasing=True)
    $e_2$ = np.zeros(p+1)
    e2[1] = 1
    w = e2.T @ np.linalg.pinv(A)
    return w
\end{lstlisting}
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                          algoritm                        │
# ╰──────────────────────────────────────────────────────────╯

snippet AFOR "for" iA
\For{$1}
	\State $2
\EndFor
$0
endsnippet

snippet AIF "for" iA
\If{$1}
	\State $2
\EndIf
$0
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                          matrix                          │
# ╰──────────────────────────────────────────────────────────╯

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet pautomat "p automatrix" iA
\pAutoNiceMatrix{3-3}{$1_{\arabic{iRow}\arabic{jCol}}}
endsnippet

# bmat conflict with bm{at}
snippet brmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet


context "math()"
snippet cvec "column vector" iA
\begin{pmatrix} $1 \\\\ ${2:\\vdots} ${3:\\\\}  \end{pmatrix}$0
endsnippet

context "math()"
snippet cbvec "column vector" iA
\begin{bmatrix} $1 \\\\ ${2:\\vdots} ${3:\\\\}  \end{bmatrix}$0
endsnippet

priority 100000
context "math()"
snippet "eye(\d)" "eye matrix" irA
\left(
\begin{array}{`!p snip.rv='c'*int(match.group(1))`}
`!p
from math import floor
n_rows = n_cols = int(match.group(1))
ret = ""
pos_0_x, pos_0_y = n_rows // 2, n_rows // 2
pos_0_x, pos_0_y = pos_0_x + 1, pos_0_y - 1 # adjust
for row in range(n_rows):
	for col in range(n_cols):
		# 0
		if (row == pos_0_x and col == pos_0_y) or (row == pos_0_y and col == pos_0_x):
			ret += r" \text{\huge0} "
		elif row == col == 0 or row == col == n_rows - 1:
			ret += " 1 "
		elif row == col:
			ret += r" \ddots "
		else:
			ret += " "
		if col != n_cols - 1:
			ret += "&"
	# end of row
	if row != n_rows - 1:
		ret += r"\\" + "\n"
snip.rv=ret
`
\end{array}
\right)
endsnippet

# ╭──────────────────────────────────────────────────────────╮
# │                          Greek                           │
# ╰──────────────────────────────────────────────────────────╯
context "math()"
snippet rrr "gamma" iA
\gamma
endsnippet

context "math()"
snippet tau "tau" iA
\tau
endsnippet

context "math()"
snippet RRR "gamma" iA
\Gamma
endsnippet

context "math()"
snippet zzz "zeta" iA
\zeta
endsnippet

context "math()"
snippet pps "psi" iA
\psi
endsnippet

context "math()"
snippet PPS "Psi" iA
\Psi
endsnippet

context "math()"
snippet ppp "phi" iA
\phi
endsnippet

priority 100000000
context "math()"
snippet vppp "phi" iA
\varphi
endsnippet

context "math()"
snippet PPP "phi" iA
\Phi
endsnippet

context "math()"
snippet sig "sigma" iA
\sigma
endsnippet

context "math()"
snippet Sig "Sigma" iA
\Sigma
endsnippet

context "math()"
snippet lam "lambda" iA
\lambda
endsnippet

context "math()"
snippet Lam "Lambda" iA
\Lambda
endsnippet

context "math()"
snippet eps "eps" iA
\epsilon
endsnippet

snippet lll "l" iA
\ell
endsnippet

snippet aaa "\alpha" iA
\alpha
endsnippet

snippet bbb "\beta" iA
\beta
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet www "omega" iA
\omega
endsnippet

context "math()"
snippet WWW "omega" iA
\Omega
endsnippet

context "math()"
snippet del "Delta" wA
\delta
endsnippet

context "math()"
snippet Del "Delta" wA
\Delta
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                           math                           │
# ╰──────────────────────────────────────────────────────────╯
snippet mk "Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

context "math()"
snippet 'vec([vbaop])' "vector" rwA
\vec{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet 'vec{b}m([vbaof])' "vector" rwA
vec{\bm{`!p snip.rv = match.group(1)`}}
endsnippet

snippet \1 "indicator" iA
\mathbbm{1}
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet norm "norm" iA
\norm{${1:$VISUAL}}$0
endsnippet

context "math()"
snippet abs "abs" iA
\abs{${1:$VISUAL}}$0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

context "math()"
priority 100
snippet ** "cdot" iA
\cdot
endsnippet

priority 100000
context "math()"
snippet '(?<!\\)(sin|mu|cos|arccot|cot|csc|ln|log|det|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}$0
endsnippet

snippet || "mid" iA
 \mid $0
endsnippet

context "math()"
snippet ss "subset" Ai
\subset
endsnippet

snippet notin "not in " iA
\not\in
endsnippet

# if has $2, add superscript
snippet UUU "bigcup" iA
\bigcup_{${1:i \in I}}`!p snip.rv = "^{" if t[2] else ""`$2`!p snip.rv = "}" if t[2] else ""` $0
endsnippet

snippet Uu "cup" iA
\cup
endsnippet

snippet NNN "cap" iA
\bigcap_{${1:i \in I}}`!p snip.rv = "^{" if t[2] else ""`$2`!p snip.rv = "}" if t[2] else ""` $0
endsnippet

snippet Nn "cap" iA
\cap
endsnippet

context "math()"
snippet OOO "emptyset" iA
\emptyset
endsnippet

snippet SI "SI units" iA
\SI{$1}{$2}
endsnippet

context "math()"
snippet 'sum([A-Za-z])' "sum with variable" rwA
\sum_{`!p snip.rv = match.group(1)`=${1:1}}`!p snip.rv = "^{" if t[2] else ""`$2`!p snip.rv = "}" if t[2] else ""` ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet 'lim([A-Za-z])' "limit variable" wrA
\lim_{`!p snip.rv = match.group(1)` \to ${2:\infty}}
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet


context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                 bar / hat / overset etc                  │
# ╰──────────────────────────────────────────────────────────╯
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\widehat{$1}$0
endsnippet

context "math()"
snippet "til" "tilde" riA
\widetilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\widehat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet ob "overbrace" i
\overbrace{${1:${VISUAL}}}^${2:up}$0
endsnippet

context "math()"
snippet ub "underbrace" i
\underbrace{${1:${VISUAL}}}_${2:under}$0
endsnippet

priority 1
context "math()"
snippet os "overset" i
\overset{${1:up}}{${2:${VISUAL}}}$0
endsnippet

context "math()"
snippet us "underset" i
\underset{${1:down}}{${2:${VISUAL}}}$0
endsnippet

context "math()"
snippet sk "substack" iA
\substack{$1 \\\\ $2}$0
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                          arrow                           │
# ╰──────────────────────────────────────────────────────────╯
context "math()"
snippet t== "def as" Ai
\triangleq
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 100
context "math()"
snippet <- "gets" iA
\gets
endsnippet

priority 1000
context "math()"
snippet --> "longto" iA
\longrightarrow
endsnippet

# ie <->, sub with gets first
priority 200
context "math()"
snippet \gets> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~> ">" iA
\succ
endsnippet

snippet \succ= "=>" iA
\succeq
endsnippet

snippet ~< "<" iA
\prec
endsnippet

snippet \prec= "<=" iA
\preceq
endsnippet

priority 10000
snippet iid~~ "~" iA
\overset{iid}{\sim}
endsnippet

priority 1
snippet ~~ "~" iA
\sim
endsnippet

snippet <! "normal" iA
\triangleleft
endsnippet

snippet <> "hokje" iA
\langle $0 \rangle
endsnippet

snippet goup "up arrow" i
\nearrow
endsnippet

snippet godown "down arrow" i
\searrow
endsnippet

snippet <= "leq" iA
\le
endsnippet

snippet >= "geq" iA
\ge
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

snippet != "equals" iA
\neq
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                       superscript                        │
# ╰──────────────────────────────────────────────────────────╯
context "math()"
snippet TT "transpose" iA
^\top
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet cpl "complement" iA
^{c}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet tp "^3 triple" iA
^3
endsnippet

context "math()"
snippet tu "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet tq "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet tst "star" iA
^*
endsnippet
# ╭──────────────────────────────────────────────────────────╮
# │                        subscript                         │
# ╰──────────────────────────────────────────────────────────╯
context "math()"
snippet '([A-Za-z}])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet


context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet "([a-zA-Z])_\{(\d+)\}(\d)" "auto subscript3 a_{12}3 => a_{123}" Ar
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2) + match.group(3)`}
endsnippet

context "math()"
snippet "([A-Za-z]})([ijk])" "\bm{x}i => \bm{x}_{i}" Ar
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

priority 2000
context "math()"
snippet "\b([a-zA-Z}])u([ijkn])" "xi" rwA
`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`$1}$0
endsnippet

# bn12 => \binom{1}{2}
priority 1000000
context "math()"
snippet 'bn_(\d)(\d)' "binom" wrA
\binom{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

# auih => a_{i-1}
# first expand to a_{il}
# `!p snip.rv=match.group(1)`_{i$1}$0
priority 2000
context "math()"
snippet "\b([a-zA-Z}])_[{]([ijkn])h" "x_{i-1}" rwA
`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`-1
endsnippet

# auil => a_{i+1}
# first expand to a_{il
# `!p snip.rv=match.group(1)`_{i$1}$0
priority 2000
context "math()"
snippet "\b([a-zA-Z}])_[{]([ijkn])l" "x_{i+1}" rwA
`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`+1
endsnippet

# au3i => a_{iii}
# will be first expand to au_3
priority 10000
context "math()"
snippet "\b([a-zA-Z}])u_(\d)([ijkn])" "xiiii" rwA
`!p snip.rv=match.group(1)`_{`!p snip.rv=int(match.group(2))*match.group(3)`$1}$0
endsnippet

# auuij then tab => a_{ij}
context "math()"
snippet "\b([a-zA-Z}])uu([a-zA-Z]+)" "xijkl" rw
`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`$1}$0
endsnippet

priority 2000
context "math()"
snippet "\b([a-zA-Z])uh" "x_{i-1}" rwA
`!p snip.rv=match.group(1)`_{i-1}
endsnippet

priority 2000
context "math()"
snippet "\b([a-zA-Z])ul" "x_{i+1}" rwA
`!p snip.rv=match.group(1)`_{i+1}
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet sf "subscript" iA
_{$1}$0
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

# ╭──────────────────────────────────────────────────────────╮
# │                         fraction                         │
# ╰──────────────────────────────────────────────────────────╯
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# ╭──────────────────────────────────────────────────────────╮
# │                           text                           │
# ╰──────────────────────────────────────────────────────────╯
snippet bb "bold" i
\textbf{${1:${VISUAL}}}
endsnippet

snippet codet "code" iA
\texttt{${1:${VISUAL}}}
endsnippet

snippet tcolor "textcolor" iA
\textcolor{${1:red}}{${2:${VISUAL}}}
endsnippet

snippet tbfcolor "textcolor + bf" iA
\textcolor{${1:red}}{\textbf{${2:${VISUAL}}}}
endsnippet

context "math()"
snippet loss "mathcal L" iA
\mathcal{L}
endsnippet

context "math()"
snippet risk "mathcal R" iA
\mathcal{R}
endsnippet

context "math()"
snippet param "theta" iA
\theta
endsnippet

context "math()"
snippet "m(X|Y|F|N|D|O|M|E)" "mathcal " riA
\mathcal{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mbb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet where "where" iA
\text{where }
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet


context "math()"
snippet deg "degree" iA
\text{deg}($1)$0
endsnippet

snippet curly "mathscr" iA
\mathscr{$1}$0
endsnippet

context "math()"
snippet tt "text" iA
\text{${1:${VISUAL}}}$0
endsnippet

priority 10000000
context "math()"
snippet "bm([a-zA-Z01]+)" "bm{}" rwA
\bm{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "\\bm{m}u" "bm mu" rwA
\bm{\mu}
endsnippet

context "math()"
snippet "\\bm{l}am" "bm lam" rwA
\bm{\lambda}
endsnippet

context "math()"
snippet "\\bm{e}ps" "bm eps" rwA
\bm{\epsilon}
endsnippet

context "math()"
snippet "\\bm{a}aa" "bm alpha" rwA
\bm{\alpha}
endsnippet

context "math()"
snippet "\\bm{b}bb" "bm beta" rwA
\bm{\beta}
endsnippet

context "math()"
snippet "\\bm{p}aram" "bm theta" rwA
\bm{\theta}
endsnippet

context "math()"
snippet LHS "text LHS" iA
\text{LHS}
endsnippet

context "math()"
snippet RHS "text RHS" iA
\text{RHS}
endsnippet

# ╭──────────────────────────────────────────────────────────╮
# │                        delimiter                         │
# ╰──────────────────────────────────────────────────────────╯
context "math()"
snippet evalat "|_" iA
\Bigr|_{$1} $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${visual}} \right| $0
endsnippet


snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

# ╭──────────────────────────────────────────────────────────╮
# │                           other                          │
# ╰──────────────────────────────────────────────────────────╯
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

# vim:ft=snippets
